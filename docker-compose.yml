version: "3"

services:
  api:
    build:
      context: ./services/api
    ports:
      - "8080:8080"
    depends_on:
      - postgresql
    networks:
      - tiny-network
  redis:
    image: redis/redis-stack:latest
    user: root
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    environment:
      REDIS_ARGS: --requirepass ${REDIS_UI_PASSWORD}
    volumes:
      - ./data_redis:/var/lib/redis/data
  postgresql:
    build:
      context: ./services/postgresql
      args:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    networks:
      - tiny-network

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - JUTE_MAXBUFFER=2097152

  kafka:
    build:
      context: ./services/kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
      - JVM_OPTS=-Xms32M -Xmx64M

volumes:
  postgresql-data:
  data_redis:

networks:
  tiny-network:
